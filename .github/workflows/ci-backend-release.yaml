on:
  workflow_call:
jobs:
  buildDocker:
    runs-on: ubuntu-latest
    container: openjdk:17-jdk-alpine3.14
    # container: openjdk:11.0.9.1-jdk
    # container: adoptopenjdk/openjdk11:jdk-11.0.11_9-alpine
    # container: adoptopenjdk/openjdk11:jdk-11.0.11_9-alpine-slim
    # container: openjdk:18-jdk-alpine3.15
    steps:
      - uses: actions/checkout@v3
      - name: AddAPK
        run: apk --no-cache add git curl jq
      - run: git config --global --add safe.directory /__w/crc-${{ secrets.CRC_SERVICENAME }}/crc-${{ secrets.CRC_SERVICENAME }}
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.CRC_GIT_TOKEN }}

      - name: GitSubmodule
        run: |
          git submodule add --force https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-common.git
          git submodule update --remote -f --init

      # - name: Setup Gradle
      #   uses: gradle/gradle-build-action@v2
      #   with:
      #     gradle-version: 7.2

      - name: DockerLogin
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.CRC_ACR_REGISTRY }}
          username: ${{ secrets.CRC_ACR_USER }}
          password: ${{ secrets.CRC_ACR_TOKEN }}

##### CodeScan
      - name: SonarQubeScan
        if: "contains(github.ref_name, 'SONAR')"
        run: |
          ./gradlew sonarqube -Dsonar.login=${{ secrets.CRC_SONARQUBE_TOKEN }} -Dsonar.projectName=CRC-${{ secrets.CRC_SERVICENAME }}-${{ github.ref_name }} -Dsonar.projectKey=CRC-${{ secrets.CRC_SERVICENAME }}-${{ github.ref_name }}

##### Test
      - name: JustTest
        if: "${{ github.ref_name == 'release' }} || ${{ github.ref_name == 'master' }} || contains( github.ref_name, 'CRC' || contains( github.ref_name, 'production' }}"
        run: |
          # git submodule add --force https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-common.git
          # git submodule update --remote -f --init
          java --version
          ./gradlew clean test

##### Test Before Release
      - name: PrepareRelease
        if: "${{ github.ref_name == 'release' }} && !(contains(github.event.head_commit.message, 'Gradle Release Plugin'))"
        run: |
          git remote set-url origin https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/${{ github.repository }}.git
          git checkout ${{ github.ref_name }}
          # git submodule add --force https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-common.git
          # git submodule update --remote -f --init
          git add -A
          git commit -a -m "Update deployment image [${{ github.ref_name }}]"
          git pull && git push 
          ./gradlew -x test -Prelease.useAutomaticVersion=true release

##### Release overlay/dev
      - name: BuildContainerSnapshotImage
        if: "${{ github.ref_name == 'deployment' }} && ${{ github.event_name == 'pull_request' }}"
        run: |
          echo "START BuildContainerSnapshotImage"
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/
          # git submodule add --force https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-common.git
          # git submodule update --remote -f --init
          skaffold build -q > build.json
          echo "FINISH BuildContainerSnapshotImage"
          IMG_NAME=$(jq -r ".builds[0].imageName" build.json)
          IMG_WITH_TAG=$(jq -r ".builds[0].tag" build.json)
          IMG_VERSION=$(echo ${IMG_WITH_TAG}  | cut -d ":" -f 2 | cut -d "@" -f 1)
          SVC_NAME=$(echo ${IMG_NAME} | grep -o '[^/]*$')
          echo IMG_NAME="${IMG_NAME}" >> variables
          echo IMG_WITH_TAG="${IMG_WITH_TAG}" >> variables
          echo IMG_VERSION="${IMG_VERSION}" >> variables
          echo SVC_NAME="${{ secrets.CRC_SERVICENAME }}" >> variables

      # - name: UploadBuildContainerSnapshotImageArtifact
      #   if: "${{ github.ref_name == 'deployment' }} && ${{ github.event_name == 'pull_request' }}"
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: variables
      #     path: $CI_PROJECT_DIR/variables

      - name: UpdateDeploymentSnapshotTemplate
        if: "${{ github.ref_name == 'deployment' }} && ${{ github.event_name == 'pull_request' }}"
        run: |
          echo "START UpdateDeploymentSnapshotTemplate"
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          git clone https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-app-deployment.git
          cd app-deployment
          git checkout nonprd
          source variables
          cd overlay/dev
          kustomize edit set image ${IMG_NAME}=${IMG_NAME}:${IMG_VERSION}
          cd ../..
          git add -A
          git commit -a -m "[Gradle Release Plugin]"
          git pull https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-app-deployment.git
          git push https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-app-deployment.git
          echo "FINISH UpdateDeploymentSnapshotTemplate"

##### Release overlay/sit
      - name: BuildContainerReleaseImage
        if: "${{ github.ref_name == 'release' }} && ${{ github.event.head_commit.message != '' }}"
        run: |
          echo "START BuildContainerReleaseImage"
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/
          # git submodule add --force https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-common.git
          # git submodule update --remote -f --init
          skaffold build -q --tag ${{ github.event.head_commit.message }} > build.json
          echo "FINISH BuildContainerReleaseImage"
          IMG_NAME=$(jq -r ".builds[0].imageName" build.json)
          IMG_WITH_TAG=$(jq -r ".builds[0].tag" build.json)
          IMG_VERSION=$(echo ${IMG_WITH_TAG}  | cut -d ":" -f 2 | cut -d "@" -f 1)
          SVC_NAME=$(echo ${IMG_NAME} | grep -o '[^/]*$')
          echo IMG_NAME="${IMG_NAME}" >> variables
          echo IMG_WITH_TAG="${IMG_WITH_TAG}" >> variables
          echo IMG_VERSION="${IMG_VERSION}" >> variables
          echo SVC_NAME="${{ secrets.CRC_SERVICENAME }}" >> variables
      # - name: UploadBuildContainerReleaseImageArtifact
      #   if: "${{ github.ref_name == 'release' }} && ${{ github.event.head_commit.message != '' }}"
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: variables
      #     path: variables

      - name: UpdateDeploymentReleaseTemplate
        if: "${{ github.ref_name == 'release' }} && ${{ github.event.head_commit.message != '' }}"
        run: |
          echo "START UpdateDeploymentReleaseTemplate"
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          git clone https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-app-deployment.git
          cd app-deployment
          git checkout nonprd
          source variables
          cd overlay/sit
          kustomize edit set image ${IMG_NAME}=${IMG_NAME}:${IMG_VERSION}
          cd ../..
          git add -A
          git commit -a -m "[Gradle Release Plugin]"
          git pull https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-app-deployment.git
          git push https://${{ secrets.CRC_GIT_USER }}:${{ secrets.CRC_GIT_TOKEN }}@github.com/digital-ventures/crc-app-deployment.git
          echo "FINISH UpdateDeploymentReleaseTemplate"